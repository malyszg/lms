version: '3.8'

services:
  # PHP-FPM Application
  app:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      args:
        TARGET_STAGE: production
    container_name: lms_app_prod
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - app_data:/var/www/html/var
      - ./docker/php.ini:/usr/local/etc/php/conf.d/custom.ini
    depends_on:
      - mysql
      - rabbitmq
      - redis
    networks:
      - lms_network
    environment:
      - APP_ENV=prod
      - APP_DEBUG=false
      - APP_SECRET=${APP_SECRET}
      - DATABASE_URL=mysql://${MYSQL_USER}:${MYSQL_PASSWORD}@mysql:3306/${MYSQL_DATABASE}
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672/%2f
      - REDIS_URL=redis://redis:6379
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GEMINI_MODEL=${GEMINI_MODEL}
      - GEMINI_API_BASE_URL=${GEMINI_API_BASE_URL}
      - CDP_MORIZON_URL=${CDP_MORIZON_URL}
      - CDP_MORIZON_TOKEN=${CDP_MORIZON_TOKEN}
      - CDP_GRATKA_URL=${CDP_GRATKA_URL}
      - CDP_GRATKA_TOKEN=${CDP_GRATKA_TOKEN}
      - CDP_HOMSTERS_URL=${CDP_HOMSTERS_URL}
      - CDP_HOMSTERS_TOKEN=${CDP_HOMSTERS_TOKEN}
      - MAX_DELIVERY_RETRIES=${MAX_DELIVERY_RETRIES}
      - RETRY_DELAY_SECONDS=${RETRY_DELAY_SECONDS}
      - SESSION_LIFETIME=${SESSION_LIFETIME}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Web Server
  nginx:
    image: nginx:alpine
    container_name: lms_nginx_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - app_data:/var/www/html/var
      - ./docker/nginx.prod.conf:/etc/nginx/conf.d/default.conf
      - ./docker/ssl:/etc/nginx/ssl
    depends_on:
      - app
    networks:
      - lms_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MySQL Database
  mysql:
    image: mysql:9.4
    container_name: lms_mysql_prod
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql.prod.cnf:/etc/mysql/conf.d/custom.cnf
    networks:
      - lms_network
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: lms_rabbitmq_prod
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: /
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - lms_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: lms_redis_prod
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - lms_network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: lms_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - lms_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana Dashboard (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: lms_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - lms_network
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}

volumes:
  mysql_data:
    driver: local
  rabbitmq_data:
    driver: local
  redis_data:
    driver: local
  app_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  lms_network:
    driver: bridge
