name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:9.4
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: lms_db
          MYSQL_USER: lms_user
          MYSQL_PASSWORD: lms_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, iconv, json, mbstring, pdo

    - name: Set environment variables
      run: |
        echo "DATABASE_URL=mysql://lms_user:lms_password@127.0.0.1:3306/lms_db?serverVersion=9.4&charset=utf8mb4" >> $GITHUB_ENV
        echo "TEST_DATABASE_URL=mysql://lms_user:lms_password@127.0.0.1:3306/lms_db_test?serverVersion=9.4&charset=utf8mb4" >> $GITHUB_ENV
        echo "TEST_MYSQL_HOST=127.0.0.1" >> $GITHUB_ENV
        echo "APP_ENV=test" >> $GITHUB_ENV
        echo "APP_SECRET=ci-test-secret-key-for-symfony-cache-clear" >> $GITHUB_ENV

    - name: Install dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Create test database
      run: |
        mysql -h 127.0.0.1 -u root -proot_password -e "
        CREATE DATABASE IF NOT EXISTS lms_db_test CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
        GRANT ALL PRIVILEGES ON lms_db_test.* TO 'lms_user'@'%';
        FLUSH PRIVILEGES;
        "

    - name: Verify migration files exist
      run: |
        echo "Checking migration files..."
        ls -la migrations/
        echo "Migration files check completed"

    - name: Run database migrations for test
      run: |
        echo "Setting up environment variables..."
        export DATABASE_URL="${{ env.TEST_DATABASE_URL }}"
        export APP_ENV="test"
        
        echo "Checking migration status before running migrations..."
        php bin/console doctrine:migrations:status || echo "Migration status check failed, continuing..."
        
        echo "Running migrations for test database..."
        php bin/console doctrine:migrations:migrate --no-interaction
        echo "Migrations completed successfully"
        
        echo "Checking migration status after running migrations..."
        php bin/console doctrine:migrations:status || echo "Migration status check failed"
        
        # Verify tables were created
        echo "Verifying test database tables..."
        mysql -h 127.0.0.1 -u lms_user -plms_password lms_db_test -e "SHOW TABLES;"

    - name: Run unit tests
      run: |
        export DATABASE_URL="${{ env.TEST_DATABASE_URL }}"
        export APP_ENV="test"
        vendor/bin/phpunit tests/Unit --coverage-text

    - name: Run functional tests
      run: |
        export DATABASE_URL="${{ env.TEST_DATABASE_URL }}"
        export APP_ENV="test"
        vendor/bin/phpunit tests/Functional --coverage-text

  build:
    name: Build Production Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check Docker Hub secrets
        run: |
          echo "Checking Docker Hub secrets..."
          if [ -z "${{ secrets.DOCKER_USERNAME }}" ] || [ -z "${{ secrets.DOCKER_PASSWORD }}" ]; then
            echo "Docker Hub secrets not configured. Skipping Docker build."
            echo "DOCKER_USERNAME: '${{ secrets.DOCKER_USERNAME }}'"
            echo "DOCKER_PASSWORD: '${{ secrets.DOCKER_PASSWORD }}'"
            echo "To enable Docker builds, add DOCKER_USERNAME and DOCKER_PASSWORD secrets to your repository."
            exit 0
          else
            echo "Docker Hub secrets found. Proceeding with build."
            echo "DOCKER_USERNAME: '${{ secrets.DOCKER_USERNAME }}'"
            echo "DOCKER_USERNAME length: ${#DOCKER_USERNAME}"
          fi
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Verify Docker login
        run: |
          echo "Testing Docker Hub login..."
          docker info | grep Username || echo "No username found in docker info"
          echo "Docker login test completed."

      - name: Debug Docker username
        run: |
          echo "DOCKER_USERNAME from secret: '${{ secrets.DOCKER_USERNAME }}'"
          echo "DOCKER_USERNAME length: ${#DOCKER_USERNAME}"
          if [ -z "${{ secrets.DOCKER_USERNAME }}" ]; then
            echo "ERROR: DOCKER_USERNAME secret is empty!"
            echo "Please check your GitHub repository secrets."
            exit 1
          else
            echo "DOCKER_USERNAME secret is not empty, proceeding with build."
          fi
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.prod
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/lms:main
            ${{ secrets.DOCKER_USERNAME }}/lms:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, zip, bcmath, gd, sockets

      - name: Set environment variables
        run: |
          echo "DATABASE_URL=mysql://lms_user:lms_password@127.0.0.1:3306/lms_db?serverVersion=9.4&charset=utf8mb4" >> $GITHUB_ENV
          echo "TEST_DATABASE_URL=mysql://lms_user:lms_password@127.0.0.1:3306/lms_db_test?serverVersion=9.4&charset=utf8mb4" >> $GITHUB_ENV
          echo "APP_ENV=test" >> $GITHUB_ENV
          echo "APP_SECRET=ci-test-secret-key-for-symfony-cache-clear" >> $GITHUB_ENV

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress
        env:
          APP_ENV: test
          DATABASE_URL: mysql://lms_user:lms_password@127.0.0.1:3306/lms_db_test
          APP_SECRET: test-secret-key-for-ci
          GEMINI_API_KEY: test-api-key-for-ci
          GEMINI_MODEL: gemini-2.0-flash
          GEMINI_API_BASE_URL: https://generativelanguage.googleapis.com

      - name: Run security audit
        run: composer audit --no-dev

      - name: Run PHP CS Fixer
        run: |
          if [ ! -f .php-cs-fixer.php ]; then
            echo "Creating PHP CS Fixer config..."
            cat > .php-cs-fixer.php << 'EOF'
          <?php
          $finder = PhpCsFixer\Finder::create()
              ->in(__DIR__)
              ->exclude('vendor')
              ->exclude('var')
              ->exclude('tests')
              ->name('*.php');
          
          return (new PhpCsFixer\Config())
              ->setRules([
                  '@Symfony' => true,
                  'array_syntax' => ['syntax' => 'short'],
                  'ordered_imports' => true,
                  'no_unused_imports' => true,
              ])
              ->setFinder($finder);
          EOF
          fi
          
          # Install PHP CS Fixer if not present
          if ! command -v php-cs-fixer &> /dev/null; then
            composer require --dev friendsofphp/php-cs-fixer
          fi
          
          # Run PHP CS Fixer in dry-run mode and capture output
          echo "Running PHP CS Fixer to check code style..."
          if ./vendor/bin/php-cs-fixer fix --dry-run --diff --verbose; then
            echo "✅ Code style check passed - no issues found"
          else
            echo "⚠️ Code style issues found. This is informational only."
            echo "To fix these issues, run: ./vendor/bin/php-cs-fixer fix"
            echo "Security scan continues despite code style issues..."
          fi