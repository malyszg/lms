{% extends 'base.html.twig' %}

{% block title %}Nieudane dostawy - LMS{% endblock %}

{% block body %}
<div class="container-fluid">
    <!-- Page Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <h1 class="h3 mb-0">
                    <i class="bi bi-exclamation-triangle me-2"></i>
                    Nieudane dostawy
                </h1>
            </div>
        </div>
    </div>

    <!-- Filters Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-funnel me-2"></i>
                        Filtry
                    </h5>
                </div>
                <div class="card-body">
                    {% include 'failed_deliveries/_filters.html.twig' %}
                </div>
            </div>
        </div>
    </div>

    <!-- Failed Deliveries Table -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-table me-2"></i>
                        Lista nieudanych dostaw
                    </h5>
                    <div class="d-flex gap-2">
                        <select class="form-select form-select-sm" id="items-per-page" 
                                onchange="changeItemsPerPage(this.value, {{ pagination.currentPage }})">
                            <option value="20" {{ pagination.perPage == 20 ? 'selected' : '' }}>20 na stronę</option>
                            <option value="50" {{ pagination.perPage == 50 ? 'selected' : '' }}>50 na stronę</option>
                            <option value="100" {{ pagination.perPage == 100 ? 'selected' : '' }}>100 na stronę</option>
                        </select>
                    </div>
                </div>
                <div class="card-body p-0">
                    <div id="failed-deliveries-list">
                        {% include 'failed_deliveries/_list.html.twig' with {
                            'failedDeliveries': failedDeliveries,
                            'pagination': pagination,
                            'filters': filters
                        } %}
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Failed Delivery Details Slider -->
<div id="slider-container"></div>

<!-- Toast Container -->
<div id="toast-container" class="toast-container position-fixed top-0 end-0 p-3"></div>

<script>
// Initialize HTMX polling for badge
document.addEventListener('DOMContentLoaded', function() {
    // Start polling badge every 60 seconds
    const badgeElement = document.getElementById('failed-deliveries-badge');
    if (badgeElement && typeof htmx !== 'undefined') {
        htmx.trigger(badgeElement, 'every 60s');
    }
});

// Auto-refresh badge every 60 seconds
setInterval(function() {
    const badgeElement = document.getElementById('failed-deliveries-badge');
    if (badgeElement && typeof htmx !== 'undefined') {
        htmx.trigger(badgeElement, 'refresh');
    }
}, 60000);

function showToast(message, type = 'info') {
    const toastContainer = document.getElementById('toast-container');
    const toastId = 'toast-' + Date.now();
    
    const toastHtml = `
        <div id="${toastId}" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header">
                <i class="bi bi-${type === 'error' ? 'exclamation-triangle' : type === 'success' ? 'check-circle' : 'info-circle'} text-${type === 'error' ? 'danger' : type === 'success' ? 'success' : 'info'} me-2"></i>
                <strong class="me-auto">${type === 'error' ? 'Błąd' : type === 'success' ? 'Sukces' : 'Info'}</strong>
                <button type="button" class="btn-close" data-bs-dismiss="toast"></button>
            </div>
            <div class="toast-body">
                ${message}
            </div>
        </div>
    `;
    
    toastContainer.insertAdjacentHTML('beforeend', toastHtml);
    
    const toastElement = document.getElementById(toastId);
    const toast = new bootstrap.Toast(toastElement);
    toast.show();
    
    // Remove toast element after it's hidden
    toastElement.addEventListener('hidden.bs.toast', function() {
        toastElement.remove();
    });
}

// Handle HTMX events
document.addEventListener('htmx:afterRequest', function(event) {
    if (event.detail.xhr.status >= 400) {
        showToast('Wystąpił błąd podczas wykonywania operacji', 'error');
    }
});

document.addEventListener('htmx:responseError', function(event) {
    const error = event.detail.xhr.responseText;
    showToast('Wystąpił błąd podczas wykonywania operacji', 'error');
});

// Handle change items per page
function changeItemsPerPage(limit, currentPage) {
    const url = new URL(window.location);
    url.searchParams.set('limit', limit);
    url.searchParams.set('page', currentPage);
    window.location.href = url.toString();
}

// Global function to close failed delivery slider
function closeFailedDeliverySlider() {
    const slider = document.getElementById('failed-delivery-details-slider');
    const backdrop = document.getElementById('failed-delivery-slider-backdrop');
    
    if (slider && backdrop) {
        slider.style.animation = 'slideOutRight 200ms cubic-bezier(0.33, 0, 0.67, 1)';
        backdrop.style.animation = 'fadeOut 200ms cubic-bezier(0.33, 0, 0.67, 1)';
        
        setTimeout(() => {
            slider.remove();
            backdrop.remove();
        }, 200);
    }
}

// Global function to retry delivery from slider
function retryDeliveryFromSlider(id) {
    if (!confirm('Czy na pewno chcesz ponowić wysłanie tego leada?')) {
        return;
    }

    fetch('/api/failed-deliveries/' + id + '/retry', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.message) {
            showToast('Retry zainicjowany pomyślnie', 'success');
            // Reload page after 1 second
            setTimeout(() => location.reload(), 1000);
        } else if (data.error) {
            showToast('Błąd: ' + data.message, 'error');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showToast('Wystąpił błąd podczas retry', 'error');
    });
}
</script>
{% endblock %}
